version: '3.8'

services:
  # PostgreSQL для хранения данных Airflow
  postgres:
    image: postgres:13
    container_name: postgres_db
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - airflow-network

  # Инициализатор базы данных Airflow
  airflow-init:
      build:
        context: . 
        dockerfile: Dockerfile
        target: initializer  # multistage цель initializer
      environment:
        AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
        AIRFLOW_ADMIN_USER: ${AIRFLOW_ADMIN_USER}
        AIRFLOW_ADMIN_PASSWORD: ${AIRFLOW_ADMIN_PASSWORD}
      depends_on:
        - postgres
      networks:
        - airflow-network
      command: >
        bash -c "airflow db upgrade &&
                airflow users create -u ${AIRFLOW_ADMIN_USER} -p ${AIRFLOW_ADMIN_PASSWORD} -r Admin -e ${AIRFLOW_ADMIN_EMAIL} -f Admin -l User ||
                echo 'Admin user already exists' &&
                airflow webserver & airflow scheduler"

  # Веб-сервер Airflow
  airflow-webserver:
    build:
      context: . 
      dockerfile: Dockerfile
      target: production  
    container_name: airflow_server
    restart: always
    depends_on:
      - postgres
      - airflow-init
    environment:
      AIRFLOW__CORE__EXECUTOR: ${AIRFLOW_EXECUTOR}
      AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      AIRFLOW_UID: "50000"
    ports:
      - "8080:8080"
    volumes:
      - ./dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs
      - ./plugins:/opt/airflow/plugins
    networks:
      - airflow-network
    command: ["airflow", "webserver"]

  # Планировщик задач Airflow (Scheduler)
  airflow-scheduler:
    build:
      context: .  
      dockerfile: Dockerfile
      target: production  
    restart: always
    depends_on:
      - postgres
      - airflow-init
    environment:
      AIRFLOW__CORE__EXECUTOR: ${AIRFLOW_EXECUTOR}
      AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      AIRFLOW_UID: "50000"
    volumes:
      - ./dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs
      - ./plugins:/opt/airflow/plugins
    networks:
      - airflow-network
    command: ["airflow", "scheduler"]

volumes:
  postgres_data:
  airflow_logs:
  airflow_plugins:

networks:
  - airflow-network


networks:
  airflow_network:
    driver: bridge  # Здесь можно использовать другой драйвер, если необходим
